// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole?

  accounts         Account[]
  sessions         Session[]
  organizedParties PartyOrganizer[]
  saledTickets     Ticket[]
}

model UserRole {
  id     String @id @default(cuid())
  role   Role
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  TREASURE
  SALE_PERSON
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Party {
  id               String   @id @default(cuid())
  name             String
  city             String
  locale           String
  mapUrl           String?
  eventDate        DateTime
  lastTicketNumber Int      @default(0)
  description      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  batches    Batch[]
  tickets    Ticket[]
  organizers PartyOrganizer[]
}

model PartyOrganizer {
  id      String @id @default(cuid())
  userId  String
  partyId String

  party Party @relation(fields: [partyId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Batch {
  id            String   @id @default(cuid())
  name          String
  price         Int
  maxAmount     Int
  currentAmount Int
  partyId       String
  order         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  party   Party    @relation(fields: [partyId], references: [id], onDelete: Cascade)
  tickets Ticket[]

  @@unique([partyId, order])
}

model Ticket {
  id           String    @id @default(cuid())
  ticketNumber Int
  userEmail    String?
  userName     String
  userCPF      String
  userPhone    String
  purchasedAt  DateTime
  confirmedAt  DateTime?
  batchId      String
  partyId      String
  observation  String?

  sellerId String

  seller User  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  batch  Batch @relation(fields: [batchId], references: [id], onDelete: Cascade)
  party  Party @relation(fields: [partyId], references: [id], onDelete: Cascade)

  @@unique([userCPF, partyId])
}
